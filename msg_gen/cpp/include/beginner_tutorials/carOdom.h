/* Auto-generated by genmsg_cpp for file /home/jia/kinetic_workspace/sandbox/beginner_tutorials/msg/carOdom.msg */
#ifndef BEGINNER_TUTORIALS_MESSAGE_CARODOM_H
#define BEGINNER_TUTORIALS_MESSAGE_CARODOM_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace beginner_tutorials
{
template <class ContainerAllocator>
struct carOdom_ {
  typedef carOdom_<ContainerAllocator> Type;

  carOdom_()
  : vx(0.0)
  , vy(0.0)
  , vth(0.0)
  {
  }

  carOdom_(const ContainerAllocator& _alloc)
  : vx(0.0)
  , vy(0.0)
  , vth(0.0)
  {
  }

  typedef float _vx_type;
  float vx;

  typedef float _vy_type;
  float vy;

  typedef float _vth_type;
  float vth;


  typedef boost::shared_ptr< ::beginner_tutorials::carOdom_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::beginner_tutorials::carOdom_<ContainerAllocator>  const> ConstPtr;
}; // struct carOdom
typedef  ::beginner_tutorials::carOdom_<std::allocator<void> > carOdom;

typedef boost::shared_ptr< ::beginner_tutorials::carOdom> carOdomPtr;
typedef boost::shared_ptr< ::beginner_tutorials::carOdom const> carOdomConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::beginner_tutorials::carOdom_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::beginner_tutorials::carOdom_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace beginner_tutorials

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::beginner_tutorials::carOdom_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::beginner_tutorials::carOdom_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::beginner_tutorials::carOdom_<ContainerAllocator> > {
  static const char* value() 
  {
    return "2ed912b0fd0de10da7b827f569b8b385";
  }

  static const char* value(const  ::beginner_tutorials::carOdom_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x2ed912b0fd0de10dULL;
  static const uint64_t static_value2 = 0xa7b827f569b8b385ULL;
};

template<class ContainerAllocator>
struct DataType< ::beginner_tutorials::carOdom_<ContainerAllocator> > {
  static const char* value() 
  {
    return "beginner_tutorials/carOdom";
  }

  static const char* value(const  ::beginner_tutorials::carOdom_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::beginner_tutorials::carOdom_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32 vx\n\
float32 vy\n\
float32 vth\n\
\n\
";
  }

  static const char* value(const  ::beginner_tutorials::carOdom_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::beginner_tutorials::carOdom_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::beginner_tutorials::carOdom_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.vx);
    stream.next(m.vy);
    stream.next(m.vth);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct carOdom_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::beginner_tutorials::carOdom_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::beginner_tutorials::carOdom_<ContainerAllocator> & v) 
  {
    s << indent << "vx: ";
    Printer<float>::stream(s, indent + "  ", v.vx);
    s << indent << "vy: ";
    Printer<float>::stream(s, indent + "  ", v.vy);
    s << indent << "vth: ";
    Printer<float>::stream(s, indent + "  ", v.vth);
  }
};


} // namespace message_operations
} // namespace ros

#endif // BEGINNER_TUTORIALS_MESSAGE_CARODOM_H

